#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#									Dispatch
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Threads ----------------------------------------------------------------------
snippet ds "DispatchSemaphore(value: ...)" i
DispatchSemaphore(value:$1)
endsnippet

snippet dq "DispatchQueue(label: '...')" i
DispatchQueue(label: "$1")
endsnippet

snippet dqc "DispatchQueue(label: '...', attributes: .concurrent)"
DispatchQueue(label: "$1", attributes: .concurrent)
endsnippet

snippet dg "DispatchGroup()" i
DispatchGroup()
endsnippet

# Semaphores -------------------------------------------------------------------

snippet '(\w+).ws' "xxx.wait() ... xxx.signal()" br
`!p snip.rv = match.group(1) + '.wait()'`
$0
`!p snip.rv = match.group(1) + '.signal()'`
endsnippet

# Time -------------------------------------------------------------------------
snippet dt "DispatchTime.now()" i
DispatchTime.now()
endsnippet

snippet .upns ".uptimeNanoseconds" i
.uptimeNanoseconds
endsnippet

snippet '(\w+)\.ups' ".uptimeNanoseconds -- in seconds" ir
Double(`!p snip.rv = match.group(1)`.uptimeNanoseconds) / 1000000000.0
endsnippet

snippet '\|(.+)-(.+)\|' "elapsed time in seconds --> time_A - time_B" ir
`!p snip.rv = '(Double('+match.group(1)+'.uptimeNanoseconds - '+match.group(2)+'.uptimeNanoseconds)) / 1000000000.0'`
endsnippet

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#									 Socket
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

snippet .conn ".connect()" i
.connect(to:${1:host}, port:${2:port})
endsnippet

snippet .w ".write()" i
.write(from:${1:String})
endsnippet

snippet .r ".read()" i
.read(into: &${1:Data})
endsnippet

snippet '(\w+)\.READ' "read from socket + convert to string" br
var ${1:readData} = Data(capacity:4096)
guard try `!p snip.rv = match.group(1)`.read(into: &$1) > 0 else {
	print("Connection terminated.")
	break
}
guard let ${2:message} = String(data:$1, encoding:.utf8) else {
	print("Error decoding message.")
	break
}
endsnippet

snippet .l ".listen()" i
.listen(on:${1:port})
endsnippet

snippet .acc ".acceptClientConnection()" i
.acceptClientConnection()
endsnippet

snippet Data "Data()"
Data(capacity:${1:4096})
endsnippet

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#									JSON RPC
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

snippet jsonHandler "create a jsonRPC hander" b
func ${1:name}Handler(jsonRequest:String) throws -> String {
	return try jsonRPCHandler(jsonRequest) { (${2:parameters}) -> ${3:return type} in
		$0
	}
}
endsnippet

snippet jsonHANDLER "create 'extended' JRPC handler" b
func ${1:name}(${2:parameters}) -> ${3:return type} {
	$0
}
func $1Handler(jsonRequest:String) throws -> String {
	return try jsonRPCHandler(jsonRequest, handlerBlock: $1)
}
endsnippet

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#									 String
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

snippet ii "string \(interpolation)" i
\(${1:${VISUAL}})
endsnippet

snippet SD "String(data:..., encoding:.utf8)"
String(data:${1:Data}, encoding:.utf8)
endsnippet

snippet .sp ".split()" i
.split(separator:$1)
endsnippet

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#									  Loops
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

snippet w "while ... { ___ }"
while $1 {
	${0:${VISUAL}}
}
endsnippet

snippet f "for ... in ... { ___ }"
for $1 in $2 {
	${0:${VISUAL}}
}
endsnippet

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#									 Blocks
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

snippet .b "make a block : ... { ___ }"
$1 {
	${VISUAL}$0
}
endsnippet

snippet b. "make a block : ___ { ... }"
$1${VISUAL}$2 {
	$0
}
endsnippet

snippet	guard "guard ___ else { ... }" b
guard ${VISUAL}$1 else {
	$0
	break
}
endsnippet

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#									 Classes
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

snippet csc "CustomStringConvertible"
CustomStringConvertible
endsnippet

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#								  Miscellaneous
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

snippet p "print('___')"
print("${VISUAL}$1")
endsnippet

snippet .rand "TYPE.random(in: ...)" i
.random(${2:in: $1})
endsnippet
